#pragma version 10

// This TEAL was generated by TEALScript v0.78.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// signature_to_point(signature: bytes): bytes
signature_to_point:
	proto 1 1

	// contracts/ec-pairing-math.algo.ts:7
	// return ecMapTo('BLS12_381g1', signature);
	frame_dig -1 // signature: bytes
	ec_map_to BLS12_381g1
	retsub

// signature_subgroup_check(signaturePoint: bytes): boolean
signature_subgroup_check:
	proto 1 1

	// contracts/ec-pairing-math.algo.ts:11
	// return ecSubgroupCheck('BLS12_381g1', signaturePoint);
	frame_dig -1 // signaturePoint: bytes
	ec_subgroup_check BLS12_381g1
	retsub

// keyValidate(publicKey: bytes): boolean
keyValidate:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/ec-pairing-math.algo.ts:15
	// publicKeyPoint = this.pubkeyToPoint(publicKey)
	frame_dig -1 // publicKey: bytes
	callsub pubkeyToPoint
	frame_bury 0 // publicKeyPoint: byte[]

	// contracts/ec-pairing-math.algo.ts:18
	// return ecSubgroupCheck('BLS12_381g2', publicKeyPoint);
	frame_dig 0 // publicKeyPoint: byte[]
	ec_subgroup_check BLS12_381g2

	// set the subroutine return value
	frame_bury 0
	retsub

// pubkeyToPoint(publicKey: bytes): bytes
pubkeyToPoint:
	proto 1 1

	// contracts/ec-pairing-math.algo.ts:22
	// return ecMapTo('BLS12_381g2', publicKey);
	frame_dig -1 // publicKey: bytes
	ec_map_to BLS12_381g2
	retsub

// hashToPoint(message: bytes): bytes
hashToPoint:
	proto 1 1

	// contracts/ec-pairing-math.algo.ts:26
	// return ecMapTo('BLS12_381g1', message);
	frame_dig -1 // message: bytes
	ec_map_to BLS12_381g1
	retsub

// pairingCheck(messagePoint: bytes, publicKeyPoint: bytes, signaturePoint: bytes): boolean
pairingCheck:
	proto 3 1

	// contracts/ec-pairing-math.algo.ts:30
	// return ecPairingCheck(
	//       'BLS12_381g1',
	//       messagePoint + signaturePoint,
	//       publicKeyPoint +
	//         hex('024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb813e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e') +
	//         hex('0d1b3cc2c7027888be51d9ef691d77bcb679afda66c73f17f9ee3837a55024f78c71363275a75d75d86bab79f74782aa13fa4d4a0ad8b1ce186ed5061789213d993923066dddaf1040bc3ff59f825c78df74f2d75467e25e0f55f8a00fa030ed')
	//     );
	frame_dig -1 // messagePoint: bytes
	frame_dig -3 // signaturePoint: bytes
	concat
	frame_dig -2 // publicKeyPoint: bytes
	byte 0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb813e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e
	concat
	byte 0x0d1b3cc2c7027888be51d9ef691d77bcb679afda66c73f17f9ee3837a55024f78c71363275a75d75d86bab79f74782aa13fa4d4a0ad8b1ce186ed5061789213d993923066dddaf1040bc3ff59f825c78df74f2d75467e25e0f55f8a00fa030ed
	concat
	ec_pairing_check BLS12_381g1
	retsub

// verify(byte[],byte[],byte[])bool
abi_route_verify:
	// The ABI return prefix
	byte 0x151f7c75

	// signaturePoint: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// clearTextPoint: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// publicKeyPoint: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute verify(byte[],byte[],byte[])bool
	callsub verify
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// verify(publicKeyPoint: bytes, clearTextPoint: bytes, signaturePoint: bytes): boolean
verify:
	proto 3 1

	// contracts/ec-pairing-math.algo.ts:46
	// return this.pairingCheck(clearTextPoint, publicKeyPoint, signaturePoint);
	frame_dig -3 // signaturePoint: bytes
	frame_dig -1 // publicKeyPoint: bytes
	frame_dig -2 // clearTextPoint: bytes
	callsub pairingCheck
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "verify(byte[],byte[],byte[])bool"
	txna ApplicationArgs 0
	match abi_route_verify
	err